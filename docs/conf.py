# -*- coding: utf-8 -*-
#
# Configuration file for the Sphinx documentation builder.
#
# Please update the project info

import json
import os
import sys

from git import Repo

# add sourcecode to path
sys.path.insert(0, os.path.abspath('..'))

from setup import (
    __copyright__,
    __version__
)

# -- Project information -----------------------------------------------------

project = 'Deltalflow-on-ARTIQ'
author = 'Riverlane'
copyright = __copyright__
github_user = 'riverlane'

# get vars defined by by build_docs.sh
# otherwise use defaults for Jenkins and local builds
if 'CURRENT_VERSION' in os.environ:
    CURRENT_VERSION = os.environ['CURRENT_VERSION']
else:
    CURRENT_VERSION = 'dev'

if 'REPO_NAME' in os.environ:
    REPO_NAME = os.environ['REPO_NAME']
else:
    REPO_NAME = project

# Only these versions of docs will be built
# None means all version will be built
if 'DOCSVERSIONS' in os.environ:
    DOCSVERSIONS = os.environ['DOCSVERSIONS']
else:
    DOCSVERSIONS = None

if CURRENT_VERSION == 'dev':
    version = CURRENT_VERSION
    release = CURRENT_VERSION
elif CURRENT_VERSION == 'v' + __version__:
    version = CURRENT_VERSION
    release = CURRENT_VERSION
else:
    raise ValueError(f"Mismatch between the version in docs/ {CURRENT_VERSION}"
                     f"and the version in the package {__version__}")

description_ = "Distributed control system for the quantum computer."
category_ = "control system"

# -- General configuration ---------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#
# needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    'nbsphinx',
    'sphinx.ext.autodoc',
    'sphinx.ext.inheritance_diagram',
    'sphinx.ext.githubpages',
    'sphinx.ext.mathjax',
    'sphinx.ext.napoleon',
    'sphinx.ext.viewcode',
    'sphinx.ext.todo',
    'sphinx_copybutton',
    'sphinx_rtd_theme',
    'sphinx_toggleprompt',
    'recommonmark'
]

toggleprompt_offset_right = 25

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
source_suffix = ['.rst', '.md']

# The main toctree document.
master_doc = 'index'

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = 'en'

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This pattern also affects html_static_path and html_extra_path.
exclude_patterns = ['_build', 'Thumbs.db', '.DS_Store']

show_authors = True

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'

todo_include_todos = False

# -- Options for HTML output -------------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#
html_theme = 'sphinx_rtd_theme'

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#
# html_theme_options = {}

html_title = project + version

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
# html_static_path = ['_static']

# Custom sidebar templates, must be a dictionary that maps document names
# to template names.
#
# The default sidebars (for documents that don't match any pattern) are
# defined by theme itself.  Builtin themes are using these templates by
# default: ``['localtoc.html', 'relations.html', 'sourcelink.html',
# 'searchbox.html']``.
#
# html_sidebars = {}


# -- Options for HTMLHelp output ---------------------------------------------

# Output file base name for HTML help builder.
htmlhelp_basename = REPO_NAME + '_docs'


# -- Options for LaTeX output ------------------------------------------------

latex_elements = {
    # The paper size ('letterpaper' or 'a4paper').
    #
    # 'papersize': 'letterpaper',

    # The font size ('10pt', '11pt' or '12pt').
    #
    # 'pointsize': '10pt',

    # Additional stuff for the LaTeX preamble.
    #
    # 'preamble': '',

    # Latex figure (float) alignment
    #
    # 'figure_align': 'htbp',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
    (master_doc, project + '.tex', project + ' Documentation',
     author, 'manual'),
]


# -- Options for manual page output ------------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    (master_doc, project, project + ' Documentation',
     [author], 1)
]


# -- Options for Texinfo output ----------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
    (master_doc, project, project + ' Documentation',
     author, project, description_, category_),
]


# -- Options for Epub output -------------------------------------------------

# Bibliographic Dublin Core info.
epub_title = project

# The unique identifier of the text. This can be a ISBN number
# or the project homepage.
#
# epub_identifier = ''

# A unique identification for the text.
#
# epub_uid = ''

# A list of files that should not be packed into the epub file.
epub_exclude_files = ['search.html']

######################## SETUP THE RTD LOWER-LEFT #############################

try:
    html_context
except NameError:
    html_context = dict()
html_context['display_lower_left'] = True

# tell the theme which language to we're currently building
html_context['current_language'] = language

# SET CURRENT_VERSION
repo = Repo(search_parent_directories=True)

# tell the theme which version we're currently on ('CURRENT_VERSION' affects
# the lower-left rtd menu and 'version' affects the logo-area version)
html_context['current_version'] = CURRENT_VERSION
html_context['version'] = CURRENT_VERSION

# POPULATE LINKS TO OTHER VERSIONS
html_context['versions'] = list()

versions = [branch.name for branch in repo.branches + repo.tags]
# on GitHub Pages we want to show only built versions
if DOCSVERSIONS is not None:
    versions = set(str(DOCSVERSIONS).split(' ')).intersection(set(versions))

for version in versions:
    html_context['versions'].append(
        (
            version,
            '/' + REPO_NAME + '/' + version + '/'
        )
    )

# POPULATE LINKS TO OTHER FORMATS/DOWNLOADS

# settings for creating PDF with rinoh
rinoh_documents = [(
    master_doc,
    'target',
    project + ' Documentation',
    'Â© ' + copyright,
)]
today_fmt = "%B %d, %Y"

# settings for EPUB
epub_basename = 'target'

html_context['downloads'] = list()
html_context['downloads'].append(
    (
        'pdf',
        '/' + REPO_NAME + '/' + CURRENT_VERSION + '/' +
        REPO_NAME + '-docs-' + CURRENT_VERSION + '.pdf'
    )
)
html_context['downloads'].append(
    (
        'epub',
        '/' + REPO_NAME + '/' + CURRENT_VERSION + '/' +
        REPO_NAME + '-docs-' + CURRENT_VERSION + '.epub'
    )
)

######################## "EDIT ON GITHUB" LINKS ###############################

html_context['display_github'] = True
html_context['github_user'] = github_user
html_context['github_repo'] = REPO_NAME
html_context['github_version'] = 'dev/docs/'

# logging
print('html_context=')
print(json.dumps(html_context, sort_keys=True, indent=4))
